<script setup>
import { ref, computed, onMounted, watch } from "vue";
import { useRoute, useRouter } from "vue-router";
import pb from "../composables/usePocketbase";
import { websiteTheme } from "../globalvariables";

const model = computed(() => pb.authStore.model);
const route = useRoute();
const router = useRouter();
const isAuthenticated = computed(() => {
  return pb.authStore.model !== null;
});
let howToReadMore = ref(false);

// *******************************
// Version 5 QR-Code Implementation

let linkString = ref("");
let qrSize = 37;
let errCorrectionLevel = 3; // 30% error correction
// let modeIndicator = "0100"; // byte mode
let maxDataSymbols = 223;

let symbolSize = 8;
let genPoly = [1];
let paritySymbols = [];
let numParitySymbols = 0;

const finderPattern = [
  [1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 0, 0, 0, 1],
  [1, 0, 1, 1, 1, 0, 1],
  [1, 0, 1, 0, 1, 0, 1],
  [1, 0, 1, 1, 1, 0, 1],
  [1, 0, 0, 0, 0, 0, 1],
  [1, 1, 1, 1, 1, 1, 1]
];

const alignmentPos = [6, 22, 38]; // Version 5 positions
const alignmentPattern = [
  [1, 1, 1, 1, 1],
  [1, 0, 0, 0, 1],
  [1, 0, 1, 0, 1],
  [1, 0, 0, 0, 1],
  [1, 1, 1, 1, 1]
];

let gfLogarithmTable = new Array(512)
let gfExponentialTable = new Array(256)

// Fill Galois Field (GF) exponential & logarithmic tables
let primPoly = 0x11D
let x = 1;
for (let i = 0; i < 255; i++) {
  gfExponentialTable[i] = x;
  gfLogarithmTable[x] = i;
  x <<= 1; // shift left, multiplies by 2
  if (x & 0x100) {
    x ^= primPoly // ^= checks if specified property exists in an object
  }
}
for (let i = 225; i < 512; i++) {
  gfExponentialTable[i] = gfExponentialTable[i - 255];
}

// Implementing polynomial multiplication in Galois Field GF(256)
function gfPolyMultiply(_poly1, _poly2) {
  let result = new Array(_poly1.length + _poly2.length - 1).fill(0);
  for (let i = 0; i < _poly1.length; i++) {
    for (let j = 0; j < _poly2.length; j++) {
      let product = gfExponentialTable[gfLogarithmTable[_poly1[i]] + gfLogarithmTable[_poly2[j]]]; // multiplying coefficients
      result[i + j] ^= product;
    }
  }
  return result;
}

// Implementing exponentiation in Galois Field GF(256)
function gfExp(_power) {
  return gfExponentialTable[_power % 255];
}

let generatingQRCode = ref(false);

function generateQRCode(_linkString) {
  if (!_linkString) { console.log("No link provided"); return; }
  if (generatingQRCode.value) { console.log("Already processing."); return; }
  generatingQRCode.value = true; 

  //## Converting link/string to binary array
  const charArray = _linkString.split('')
  const binaryArray = charArray.map(char => char.charCodeAt(0).toString(2).padStart(8, '0'))
  const binaryData = binaryArray.join('');
  const qrMatrix = Array.from({ length: qrSize }, () => Array(qrSize).fill(null));
  console.log(`Binary data: ${binaryData}`)
  console.log(`Initialized QrMatrix: ${qrMatrix}`)

  //## Adding metadata to binary array (prepending char count and qr mode)
  const modeIndicator = '0100'; // for byte mode
  const charCount = _linkString.length.toString(2).padStart(8, '0'); // 8-bit binary of character count
  const encodedData = modeIndicator + charCount + binaryData;
  console.log(`Encoded data: ${encodedData}`); // Make sure this looks correct!

  //## Error correction
  let symbolsDataN = [];

  // creating list of numbers from our encodedData (0-255)
  for (let i = 0; i < encodedData.length; i++) {
    symbolsDataN.push(parseInt(encodedData.slice(i, i + symbolSize), 2));
  }
  // creating generator polynomial G(x)
  for (let i = 0; i < errCorrectionLevel; i++) {
    // greating G(x) using Galois Field, where G(x) = (x-a^i)(x-a^i)...
    let nextTerm = [1, gfExp(i)]; // (x-Î±^i)
    genPoly = gfPolyMultiply(genPoly, nextTerm)
  }
  // padding encodedData with 0's for parity symbols
  numParitySymbols = genPoly.length - 1
  const paddedDataN = [...symbolsDataN];
  for (let i = 0; i < numParitySymbols; i++) {
    paddedDataN.push(0)
  }
  // calculating error correction bits (paritySymbols) (divide paddedData with G(x) using GF arithmetic)
  let paddedDataNCopy = [...paddedDataN];
  for (let i = 0; i < symbolsDataN.length; i++) {
    let coefficient = paddedDataNCopy.shift() // taking first symbol
    // polynomial multiplication
    if (coefficient !== 0) {
      //**Preforms the multiplication by adding logarithms (for GF(256) multiplication)
      //  - convert each element x of genPoly into its log form
      //  - add the log of the coefficient to each element of genPoly (scaling the polynomial)
      //  - convert sum back into an exponential value
      //**So this line is 
      //  - getting log of x from genPoly, 
      //  - gets log of coefficient
      //  - adds them (computed modulo 255).
      //**The result is then used to look up the exponential table, 
      // overall giving us a scaled version of genPoly.
      let term = genPoly.map(x => gfExponentialTable[gfLogarithmTable[x] + gfLogarithmTable[coefficient]]);
      //**To divide the current data with the scaled polynomial (term), we need to 
      // subtract/reduce paddedDataN w/ the scaled polynomial (term).
      //**In Galos Field arithmetic, addition and subtraction can both be performed by XOR.
      //**XOR is used because it preforms like addition in binary modulo 2 (1 xor 0 = 1, 1 +/- 0 = 1).
      // The coefficients of polynomials are either 0 or 1, so addition in GF(256) can be done using XOR.
      for (let j = 0; j < term.length; j++) {
        //XOR (subtract) each element of paddedDataCopyN with its cooresponding element in term (scaled G(X))
        paddedDataNCopy[j] ^= term[j] // XOR
      }
    }
  }
  paritySymbols.push(...paddedDataNCopy.slice(-numParitySymbols));
  console.log(`Parity Symbols: ${paritySymbols}`)

  // appending parity symbols (error correction) to encodedData (convert paritySymbols to binary, join them, then add),
  // thus finalizing QR Code data.
  const finalQRCodeData = encodedData + paritySymbols.map(num => num.toString(2).padStart(8, '0')).join('')
  console.log(`Final QR Code Data: ${finalQRCodeData}`)

  //## Mapping qrMatrix with our raw QRcode data
  //  - set finder patterns
  //  - set timing patterns
  //  - set alignment patterns
  //  - fill data in remaining spaces

  // set finder patterns
  for (let row = 0; row < 7; row++) {  // -- top left (0, 0)
    for (let col = 0; col < 7; col++) {
      qrMatrix[row][col] = finderPattern[row][col];
    }
  }
  for (let row = 0; row < 7; row++) {  // -- top right (0, qrSize-7)
    for (let col = 0; col < 7; col++) {
      qrMatrix[row][(qrSize - 7) + col] = finderPattern[row][col];
    }
  }
  for (let row = 0; row < 7; row++) {  // -- bottom left (qrSize-7, 0)
    for (let col = 0; col < 7; col++) {
      qrMatrix[(qrSize - 7) + row][col] = finderPattern[row][col];
    }
  }

  // set timing patterns (alternating black/white squares)
  for (let i = 0; i < qrSize; i++) {
    qrMatrix[i][6] = i % 2 === 0 ? 1 : 0; // vertical line at x = 6
    qrMatrix[6][i] = i % 2 === 0 ? 1 : 0; // horizontal line at y = 6
  }

  // set alignment patterns
  alignmentPos.forEach((rowPos) => {
    alignmentPos.forEach((colPos) => {
      // skip overlapping with finder patterns
      if (
        (rowPos === 6 && colPos === 6) ||
        (rowPos === 6 && colPos === qrSize - 7) ||
        (rowPos === qrSize - 7 && colPos === 6)
      )
        return;

      for (let row = 0; row < 5; row++) {
        for (let col = 0; col < 5; col++) {
          const matrixRow = rowPos - 2 + row;
          const matrixCol = colPos - 2 + col;

          // Ensure indices are within bounds
          if (matrixRow >= 0 && matrixRow < qrSize && matrixCol >= 0 && matrixCol < qrSize) {
            qrMatrix[matrixRow][matrixCol] = alignmentPattern[row][col];
          }
        }
      }
    });
  });

  // fill data in remaining spaces
  let dataIndex = 0;
  let direction = -1; // 1 = downward, -1 = upward
  for (let col = qrSize - 1; col >= 0; col--) {
    if (col === 6) continue;
    for (let row = qrSize - 1; row >= 0; row--) {
      // Skip the timing pattern row (y = 6) and any reserved pattern spaces (finder patterns, alignment patterns)
      if ((row === 6) || (qrMatrix[row][col] !== null)) continue;
      qrMatrix[row][col] = parseInt(finalQRCodeData[dataIndex]);
      dataIndex++;
      if (dataIndex >= finalQRCodeData.length) {
        console.log("Completed filling.")
        break;
      }
    }
    direction *= -1;
  }

  console.log("Matrix being filled: ", qrMatrix);

  //## Display QR Code
  const canvas = document.createElement('canvas');
  canvas.width = qrSize * 10; // Scale the QR code (for visibility)
  canvas.height = qrSize * 10;
  const ctx = canvas.getContext('2d');
  for (let row = 0; row < qrSize; row++) {
    for (let col = 0; col < qrSize; col++) {
      if (qrMatrix[row][col] !== null) {
        // Fill black for 1 (data or pattern) and white for 0 (empty space)
        ctx.fillStyle = qrMatrix[row][col] === 1 ? 'black' : 'white';
        ctx.fillRect(col * 10, row * 10, 10, 10); // Draw each square of the QR code
      }
    }
  }
  const qrCodeContainer = document.querySelector('.qr-code-container');
  qrCodeContainer.innerHTML = ''; // Clear any previous QR code
  qrCodeContainer.appendChild(canvas);

  generatingQRCode.value = false;
  console.log("QR Code Generated")
}

// Version 5 QR-Code Implementation
// *******************************


onMounted(() => {
  // Updates isAuthenticated automatically
  pb.authStore.onChange(() => {
    isAuthenticated.value = pb.authStore.model !== null;
  });
});

// watch(linkString, (newLink) => {
//   if (newLink) {
//     generateQRCode(newLink);
//   }
// });
</script>

<!-- :class="`theme-${websiteTheme} text-primaryText`" -->
<template>
  <div class="min-h-[100vh] p-4">
    <p :class="`theme-${websiteTheme} text-primaryText font-bold text-lg`">QR Code Generator</p>
    <p class="bg-yellow-300 text-black font-bold">UNDER DEVELOPMENT</p>
    <div class="border-t-[1px] my-4 border-tertiary"></div>
    <div>
      <p :class="`theme-${websiteTheme} text-primaryText font-semibold`">Instructions & Info</p>
      <button @click="howToReadMore = !howToReadMore"
        :class="`theme-${websiteTheme} text-secondaryText font-semibold text-sm bg-secondary px-1`">
        <span v-if="howToReadMore === false">Open</span><span v-if="howToReadMore">Close</span>
        Instructions & Info</button>
      <div v-if="howToReadMore" :class="`theme-${websiteTheme} text-secondaryText`">
        <p><span class="semibold">a) </span>Put your link in the input field, then click "Generate QR Code". You will be
          given a QR code of the link you used.<br></p>
        <p><span class="semibold">b) </span>This page doesn't require sign-in and it doesn't save your QR code. Ensure
          you save your QR code before leaving.<br></p>
        <p><span class="semibold">c) </span>Send a message at <a href="https://forms.gle/TVk6J6SoD43d29229"
            target="_blank" class="underline">this
            Google form</a> if you have any other questions!<br></p>
      </div>
    </div>
    <div class="border-t-[1px] my-4 border-tertiary"></div>
    <div class="space-y-4">
      <div class="flex flex-col space-y-2">
        <p :class="`theme-${websiteTheme} text-primaryText font-semibold`">Enter link to generate QR code for:</p>
        <input class="w-80"
          :class="`courseInput border-[1px] border-tertiary theme-${websiteTheme} text-primaryText placeholder-tertiaryText`"
          v-model="linkString" placeholder="Enter Link">
        <button @click="generateQRCode(linkString)"
          class="rounded-sm w-[230px] bg-blue-600 hover:bg-blue-700 active:bg-blue-800 transition ease-in-out text-white font-semibold">
          Generate QR Code
        </button>
      </div>
      <div>
        <p :class="`theme-${websiteTheme} text-primaryText font-semibold`">Generated QR Code:</p>
        <div class="qr-code-container">

        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
input {
  outline: none;
  background: none;
}

select {
  outline: none;
  background: none;
}

.courseInput {
  padding: 2px;
  padding-left: 4px;
  border-radius: 0.175rem;
  transition: border 0.2s ease;
}

.courseInput:hover {
  border: 1px solid var(--color-unlvRed);
}

.courseInput:focus {
  border: 1px solid var(--color-unlvDarkRed);
}
</style>
